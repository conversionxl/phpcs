<?xml version="1.0"?>
<ruleset name="CXL">

    <!-- Spaces, not tabs. -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <rule ref="WordPress">
        <!-- Spaces, not tabs. -->
        <exclude name="Generic.WhiteSpace.DisallowSpaceIndent"/>

        <!-- WP filename conventions are incompatible w/ Composer PSR-4 autoloader. -->
        <exclude name="WordPress.Files.FileName"/>

        <!-- Short array syntax ftw. -->
        <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>

        <!-- Short ternary ftw. -->
        <exclude name="WordPress.PHP.DisallowShortTernary.Found"/>

        <!--
        "So far I have not found a use for file-level DocBlocks in closed-source software."
        @see https://localheinz.com/blog/2018/05/06/cost-and-value-of-docblocks/
        -->
        <exclude name="Squiz.Commenting.FileComment.Missing"/>
        <exclude name="Squiz.Commenting.FileComment.MissingPackageTag"/>

        <!-- Usually just repeats the obvious. -->
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag" />
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>

        <!-- `//end if` looks silly. -->
        <exclude name="Squiz.Commenting.LongConditionClosingComment.Missing"/>

        <!-- Sometimes useful to describe array members. -->
        <exclude name="Squiz.Commenting.PostStatementComment.Found"/>

        <!-- Often just /** @since */ is enough. -->
        <exclude name="Generic.Commenting.DocComment.MissingShort"/>

        <!-- /** @todo */ is useful. -->
        <exclude name="Generic.Commenting.Todo.CommentFound"/>
        <exclude name="Generic.Commenting.Todo.TaskFound"/>

        <!-- Core naming rules are too rigid and don't work well in other projects. -->
        <exclude name="WordPress.NamingConventions.ValidVariableName"/>

        <!-- Often complains about non-issues. -->
        <exclude name="WordPress.Security.NonceVerification.Recommended"/>
        <exclude name="WordPress.Security.ValidatedSanitizedInput" />

        <!-- Unnecessary on simple methods. -->
        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>

        <!-- Unnecessary more often than not. -->
        <exclude name="Squiz.Commenting.ClassComment"/>

        <!-- Not an actual problem. -->
        <exclude name="Squiz.PHP.CommentedOutCode.Found"/>

        <!-- Complains when there is a comment on top that is NOT a file comment. -->
        <exclude name="Squiz.Commenting.FileComment.SpacingAfterComment"/>

        <!-- Complains about URLs and other perfectly normal uses. -->
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
        <exclude name="Generic.Commenting.DocComment.ShortNotCapital"/>

        <!-- Git on Windows checks out Windows, commits Linux line endings by defaults. -->
        <exclude name="Generic.Files.LineEndings.InvalidEOLChar"/>

        <!-- Upstream translated strings. -->
        <exclude name="WordPress.WP.I18n.MissingTranslatorsComment" />

        <!-- Often redundant. -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows" />

        <!-- Doesn't make sense outside of core. -->
        <exclude name="WordPress.DB.DirectDatabaseQuery" />
        <exclude name="WordPress.DB.SlowDBQuery" />

        <!-- Localization not relevant for the moment. -->
        <exclude name="WordPress.WP.I18n" />

        <!-- A cryptic and unproductive white space sniff. -->
        <exclude name="WordPress.WhiteSpace.PrecisionAlignment" />

        <!-- Used on purpose for logging. -->
        <exclude name="WordPress.PHP.DevelopmentFunctions" />

        <!-- There is some unconventional use for inline scripts. -->
        <exclude name="WordPress.WP.EnqueuedResourceParameters" />

        <!-- Escaping is too complicated for reliable automation. -->
        <exclude name="WordPress.Security.EscapeOutput.OutputNotEscaped" />

        <!-- Intentionally used in several places. -->
        <exclude name="WordPress.WP.GlobalVariablesOverride.Prohibited" />

        <!-- Used quite a bit, needs either careful rework or nto careful bulk change to gmdate(). -->
        <exclude name="WordPress.DateTime.RestrictedFunctions.date_date" />

		<!-- Unnecessary for typed properties. -->
        <exclude name="Squiz.Commenting.VariableComment.Missing" />
        <exclude name="Squiz.Commenting.VariableComment.MissingVar" />
    </rule>

    <!--
    Allow wider vertical spacing coding style:
    ```php
        ...
        if ( foo ) {
            bar();
        }

    }
    ```
    -->
    <rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
        <properties>
            <property name="blank_line_after_check" value="0"/>
        </properties>
    </rule>

    <!--
    Custom templating frameworks etc.
    @see https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#xss-custom-printing-functions
    @todo Method elements don't work!
    -->
    <rule ref="WordPress.Security.EscapeOutput">
        <properties>
            <property name="customAutoEscapedFunctions" type="array">
                <element value="cxli"/>
                <element value="get_view_instance"/>
                <element value="render"/>
            </property>
        </properties>
    </rule>

    <!--
    Allow `add_action( 'tag', function() {
    } );
    @see https://github.com/squizlabs/PHP_CodeSniffer/issues/2001
    @see https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1485
    -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.MultipleArguments">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <!-- False positive on failed symlinks on Windows. -->
    <rule ref="Internal.NoCodeFound">
        <severity>0</severity>
    </rule>

</ruleset>
